{
  "version": 3,
  "sources": ["../../kalidokit/dist/utils/helpers.js", "../../kalidokit/dist/constants.js", "../../kalidokit/dist/utils/vector.js", "../../kalidokit/dist/PoseSolver/calcArms.js", "../../kalidokit/dist/PoseSolver/calcHips.js", "../../kalidokit/dist/utils/euler.js", "../../kalidokit/dist/PoseSolver/calcLegs.js", "../../kalidokit/dist/PoseSolver/index.js", "../../kalidokit/dist/HandSolver/index.js", "../../kalidokit/dist/FaceSolver/calcHead.js", "../../kalidokit/dist/FaceSolver/calcEyes.js", "../../kalidokit/dist/FaceSolver/calcMouth.js", "../../kalidokit/dist/FaceSolver/index.js"],
  "sourcesContent": ["/**\n * Returns a clamped value between min and max values\n * @param {Number} val : transformed value\n * @param {Number} min : minimum value\n * @param {Number} max : maximum value\n */\nexport const clamp = (val, min, max) => {\n    return Math.max(Math.min(val, max), min);\n};\n/**\n * Returns a remapped value between 0 and 1 using min and max values\n * @param {Number} value : transformed value\n * @param {Number} min : minimum value\n * @param {Number} max : maximum value\n */\nexport const remap = (val, min, max) => {\n    //returns min to max -> 0 to 1\n    return (clamp(val, min, max) - min) / (max - min);\n};\n/** A set of default pose values in radians to serve as \"rest\" values */\nexport const RestingDefault = {\n    Face: {\n        eye: {\n            l: 1,\n            r: 1,\n        },\n        mouth: {\n            x: 0,\n            y: 0,\n            shape: {\n                A: 0,\n                E: 0,\n                I: 0,\n                O: 0,\n                U: 0,\n            },\n        },\n        head: {\n            x: 0,\n            y: 0,\n            z: 0,\n            width: 0.3,\n            height: 0.6,\n            position: {\n                x: 0.5,\n                y: 0.5,\n                z: 0,\n            },\n        },\n        brow: 0,\n        pupil: {\n            x: 0,\n            y: 0,\n        },\n    },\n    Pose: {\n        RightUpperArm: {\n            x: 0,\n            y: 0,\n            z: -1.25,\n        },\n        LeftUpperArm: {\n            x: 0,\n            y: 0,\n            z: 1.25,\n        },\n        RightLowerArm: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftLowerArm: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftUpperLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        RightUpperLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        RightLowerLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftLowerLeg: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        LeftHand: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        RightHand: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        Spine: {\n            x: 0,\n            y: 0,\n            z: 0,\n        },\n        Hips: {\n            position: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            rotation: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        },\n    },\n    RightHand: {\n        RightWrist: {\n            x: -0.13,\n            y: -0.07,\n            z: -1.04,\n        },\n        RightRingProximal: {\n            x: 0,\n            y: 0,\n            z: -0.13,\n        },\n        RightRingIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.4,\n        },\n        RightRingDistal: {\n            x: 0,\n            y: 0,\n            z: -0.04,\n        },\n        RightIndexProximal: {\n            x: 0,\n            y: 0,\n            z: -0.24,\n        },\n        RightIndexIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.25,\n        },\n        RightIndexDistal: {\n            x: 0,\n            y: 0,\n            z: -0.06,\n        },\n        RightMiddleProximal: {\n            x: 0,\n            y: 0,\n            z: -0.09,\n        },\n        RightMiddleIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.44,\n        },\n        RightMiddleDistal: {\n            x: 0,\n            y: 0,\n            z: -0.06,\n        },\n        RightThumbProximal: {\n            x: -0.23,\n            y: -0.33,\n            z: -0.12,\n        },\n        RightThumbIntermediate: {\n            x: -0.2,\n            y: -0.199,\n            z: -0.0139,\n        },\n        RightThumbDistal: {\n            x: -0.2,\n            y: 0.002,\n            z: 0.15,\n        },\n        RightLittleProximal: {\n            x: 0,\n            y: 0,\n            z: -0.09,\n        },\n        RightLittleIntermediate: {\n            x: 0,\n            y: 0,\n            z: -0.225,\n        },\n        RightLittleDistal: {\n            x: 0,\n            y: 0,\n            z: -0.1,\n        },\n    },\n    LeftHand: {\n        LeftWrist: {\n            x: -0.13,\n            y: -0.07,\n            z: -1.04,\n        },\n        LeftRingProximal: {\n            x: 0,\n            y: 0,\n            z: 0.13,\n        },\n        LeftRingIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.4,\n        },\n        LeftRingDistal: {\n            x: 0,\n            y: 0,\n            z: 0.049,\n        },\n        LeftIndexProximal: {\n            x: 0,\n            y: 0,\n            z: 0.24,\n        },\n        LeftIndexIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.25,\n        },\n        LeftIndexDistal: {\n            x: 0,\n            y: 0,\n            z: 0.06,\n        },\n        LeftMiddleProximal: {\n            x: 0,\n            y: 0,\n            z: 0.09,\n        },\n        LeftMiddleIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.44,\n        },\n        LeftMiddleDistal: {\n            x: 0,\n            y: 0,\n            z: 0.066,\n        },\n        LeftThumbProximal: {\n            x: -0.23,\n            y: 0.33,\n            z: 0.12,\n        },\n        LeftThumbIntermediate: {\n            x: -0.2,\n            y: 0.25,\n            z: 0.05,\n        },\n        LeftThumbDistal: {\n            x: -0.2,\n            y: 0.17,\n            z: -0.06,\n        },\n        LeftLittleProximal: {\n            x: 0,\n            y: 0,\n            z: 0.17,\n        },\n        LeftLittleIntermediate: {\n            x: 0,\n            y: 0,\n            z: 0.4,\n        },\n        LeftLittleDistal: {\n            x: 0,\n            y: 0,\n            z: 0.1,\n        },\n    },\n};\n", "export const RIGHT = \"Right\";\nexport const LEFT = \"Left\";\nexport const PI = Math.PI;\nexport const TWO_PI = Math.PI * 2;\n", "import { PI, TWO_PI } from \"./../constants\";\n/** Vector Math class. */\nexport default class Vector {\n    constructor(a, b, c) {\n        var _a, _b, _c, _d, _e, _f;\n        if (Array.isArray(a)) {\n            this.x = (_a = a[0]) !== null && _a !== void 0 ? _a : 0;\n            this.y = (_b = a[1]) !== null && _b !== void 0 ? _b : 0;\n            this.z = (_c = a[2]) !== null && _c !== void 0 ? _c : 0;\n            return;\n        }\n        if (!!a && typeof a === \"object\") {\n            this.x = (_d = a.x) !== null && _d !== void 0 ? _d : 0;\n            this.y = (_e = a.y) !== null && _e !== void 0 ? _e : 0;\n            this.z = (_f = a.z) !== null && _f !== void 0 ? _f : 0;\n            return;\n        }\n        this.x = a !== null && a !== void 0 ? a : 0;\n        this.y = b !== null && b !== void 0 ? b : 0;\n        this.z = c !== null && c !== void 0 ? c : 0;\n    }\n    // Methods //\n    /**\n     * Returns the negative of this vector.\n     */\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n    /**\n     * Add a vector or number to this vector.\n     * @param {Vector | number} a: Vector or number to add\n     * @returns {Vector} New vector\n     */\n    add(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        else\n            return new Vector(this.x + v, this.y + v, this.z + v);\n    }\n    /**\n     * Substracts a vector or number from this vector.\n     * @param {Vector | number} a: Vector or number to subtract\n     * @returns {Vector} New vector\n     */\n    subtract(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        else\n            return new Vector(this.x - v, this.y - v, this.z - v);\n    }\n    /**\n     * Multiplies a vector or a number to a vector.\n     * @param {Vector | number} a: Vector or number to multiply\n     * @param {Vector} b: Vector to multiply\n     */\n    multiply(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        else\n            return new Vector(this.x * v, this.y * v, this.z * v);\n    }\n    /**\n     * Divide this vector by a vector or a number.\n     * @param {Vector | number} a: Vector or number to divide\n     * @returns {Vector} New vector\n     */\n    divide(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        else\n            return new Vector(this.x / v, this.y / v, this.z / v);\n    }\n    /**\n     * Check if the given vector is equal to this vector.\n     * @param {Vector} v: Vector to compare\n     * @returns {boolean} True if equal\n     */\n    equals(v) {\n        return this.x == v.x && this.y == v.y && this.z == v.z;\n    }\n    /**\n     * Returns the dot product of this vector and another vector.\n     * @param {Vector} v: Vector to dot\n     * @returns {number} Dot product\n     */\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n    /**\n     * Cross product of two vectors.\n     * @param {Vector} a: Vector to cross\n     * @param {Vector} b: Vector to cross\n     */\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    }\n    /**\n     * Get the length of the Vector\n     * @returns {number} Length\n     */\n    length() {\n        return Math.sqrt(this.dot(this));\n    }\n    /**\n     * Find the distance between this and another vector.\n     * @param {Vector} v: Vector to find distance to\n     * @param {2 | 3} d: 2D or 3D distance\n     * @returns {number} Distance\n     */\n    distance(v, d = 3) {\n        //2D distance\n        if (d === 2)\n            return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2));\n        //3D distance\n        else\n            return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2) + Math.pow(this.z - v.z, 2));\n    }\n    /**\n     * Lerp between this vector and another vector.\n     * @param {Vector} v: Vector to lerp to\n     * @param {number} fraction: Fraction to lerp\n     * @returns {Vector}\n     */\n    lerp(v, fraction) {\n        return v.subtract(this).multiply(fraction).add(this);\n    }\n    /**\n     * Returns the unit vector of this vector.\n     * @returns {Vector} Unit vector\n     */\n    unit() {\n        return this.divide(this.length());\n    }\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    }\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    }\n    /**\n     * To Angles\n     * @param {AxisMap} [axisMap = {x: \"x\", y: \"y\", z: \"z\"}]\n     * @returns {{ theta: number, phi: number }}\n     */\n    toSphericalCoords(axisMap = { x: \"x\", y: \"y\", z: \"z\" }) {\n        return {\n            theta: Math.atan2(this[axisMap.y], this[axisMap.x]),\n            phi: Math.acos(this[axisMap.z] / this.length()),\n        };\n    }\n    /**\n     * Returns the angle between this vector and vector a in radians.\n     * @param {Vector} a: Vector\n     * @returns {number}\n     */\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    }\n    /**\n     * Array representation of the vector.\n     * @param {number} n: Array length\n     * @returns {number[]} Array\n     * @example\n     * new Vector(1, 2, 3).toArray(); // [1, 2, 3]\n     */\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    }\n    /**\n     * Clone the vector.\n     * @returns {Vector} New vector\n     */\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    }\n    /**\n     * Init this Vector with explicit values\n     * @param {number} x: X value\n     * @param {number} y: Y value\n     * @param {number} z: Z value\n     */\n    init(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n    // static methods //\n    static negative(a, b = new Vector()) {\n        b.x = -a.x;\n        b.y = -a.y;\n        b.z = -a.z;\n        return b;\n    }\n    static add(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x + b.x;\n            c.y = a.y + b.y;\n            c.z = a.z + b.z;\n        }\n        else {\n            c.x = a.x + b;\n            c.y = a.y + b;\n            c.z = a.z + b;\n        }\n        return c;\n    }\n    static subtract(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x - b.x;\n            c.y = a.y - b.y;\n            c.z = a.z - b.z;\n        }\n        else {\n            c.x = a.x - b;\n            c.y = a.y - b;\n            c.z = a.z - b;\n        }\n        return c;\n    }\n    static multiply(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x * b.x;\n            c.y = a.y * b.y;\n            c.z = a.z * b.z;\n        }\n        else {\n            c.x = a.x * b;\n            c.y = a.y * b;\n            c.z = a.z * b;\n        }\n        return c;\n    }\n    static divide(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x / b.x;\n            c.y = a.y / b.y;\n            c.z = a.z / b.z;\n        }\n        else {\n            c.x = a.x / b;\n            c.y = a.y / b;\n            c.z = a.z / b;\n        }\n        return c;\n    }\n    static cross(a, b, c = new Vector()) {\n        c.x = a.y * b.z - a.z * b.y;\n        c.y = a.z * b.x - a.x * b.z;\n        c.z = a.x * b.y - a.y * b.x;\n        return c;\n    }\n    static unit(a, b) {\n        const length = a.length();\n        b.x = a.x / length;\n        b.y = a.y / length;\n        b.z = a.z / length;\n        return b;\n    }\n    /**\n     * Create new vector from angles\n     * @param {number} theta: Theta angle\n     * @param {number} phi: Phi angle\n     * @returns {Vector} New vector\n     */\n    static fromAngles(theta, phi) {\n        return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\n    }\n    static randomDirection() {\n        return Vector.fromAngles(Math.random() * TWO_PI, Math.asin(Math.random() * 2 - 1));\n    }\n    static min(a, b) {\n        return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n    }\n    static max(a, b) {\n        return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n    }\n    /**\n     * Lerp between two vectors\n     * @param {Vector} a: Vector a\n     * @param {Vector} b: Vector b\n     * @param {number} fraction: Fraction\n     */\n    static lerp(a, b, fraction) {\n        if (b instanceof Vector) {\n            return b.subtract(a).multiply(fraction).add(a);\n        }\n        else {\n            return ((b - a) * fraction + a);\n        }\n    }\n    /**\n     * Create a new vector from an Array\n     * @param {number[]} array: Array\n     * @returns {Vector} New vector\n     */\n    static fromArray(a) {\n        if (Array.isArray(a)) {\n            return new Vector(a[0], a[1], a[2]);\n        }\n        return new Vector(a.x, a.y, a.z);\n    }\n    /**\n     * Angle between two vectors\n     * @param {Vector} a: Vector a\n     * @param {Vector} b: Vector b\n     * @returns\n     */\n    static angleBetween(a, b) {\n        return a.angleTo(b);\n    }\n    static distance(a, b, d) {\n        if (d === 2)\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n        else\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));\n    }\n    static toDegrees(a) {\n        return a * (180 / PI);\n    }\n    static normalizeAngle(radians) {\n        let angle = radians % TWO_PI;\n        angle = angle > PI ? angle - TWO_PI : angle < -PI ? TWO_PI + angle : angle;\n        //returns normalized values to -1,1\n        return angle / PI;\n    }\n    static normalizeRadians(radians) {\n        if (radians >= PI / 2) {\n            radians -= TWO_PI;\n        }\n        if (radians <= -PI / 2) {\n            radians += TWO_PI;\n            radians = PI - radians;\n        }\n        //returns normalized values to -1,1\n        return radians / PI;\n    }\n    static find2DAngle(cx, cy, ex, ey) {\n        const dy = ey - cy;\n        const dx = ex - cx;\n        const theta = Math.atan2(dy, dx);\n        return theta;\n    }\n    /**\n     * Find 3D rotation between two vectors\n     * @param {Vector} a: First vector\n     * @param {Vector} b: Second vector\n     * @param {boolean} normalize: Normalize the result\n     */\n    static findRotation(a, b, normalize = true) {\n        if (normalize) {\n            return new Vector(Vector.normalizeRadians(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeRadians(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeRadians(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n        }\n        else {\n            return new Vector(Vector.find2DAngle(a.z, a.x, b.z, b.x), Vector.find2DAngle(a.z, a.y, b.z, b.y), Vector.find2DAngle(a.x, a.y, b.x, b.y));\n        }\n    }\n    /**\n     * Find roll pitch yaw of plane formed by 3 points\n     * @param {Vector} a: Vector\n     * @param {Vector} b: Vector\n     * @param {Vector} c: Vector\n     */\n    static rollPitchYaw(a, b, c) {\n        if (!c) {\n            return new Vector(Vector.normalizeAngle(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeAngle(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeAngle(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n        }\n        const qb = b.subtract(a);\n        const qc = c.subtract(a);\n        const n = qb.cross(qc);\n        const unitZ = n.unit();\n        const unitX = qb.unit();\n        const unitY = unitZ.cross(unitX);\n        const beta = Math.asin(unitZ.x) || 0;\n        const alpha = Math.atan2(-unitZ.y, unitZ.z) || 0;\n        const gamma = Math.atan2(-unitY.x, unitX.x) || 0;\n        return new Vector(Vector.normalizeAngle(alpha), Vector.normalizeAngle(beta), Vector.normalizeAngle(gamma));\n    }\n    /**\n     * Find angle between 3D Coordinates\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {Vector | number} c: Vector or Number\n     */\n    static angleBetween3DCoords(a, b, c) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n            c = new Vector(c);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = a.subtract(b);\n        // Calculate vector between points 2 and 3\n        const v2 = c.subtract(b);\n        // The dot product of vectors v1 & v2 is a function of the cosine of the\n        // angle between them (it's scaled by the product of their magnitudes).\n        const v1norm = v1.unit();\n        const v2norm = v2.unit();\n        // Calculate the dot products of vectors v1 and v2\n        const dotProducts = v1norm.dot(v2norm);\n        // Extract the angle from the dot products\n        const angle = Math.acos(dotProducts);\n        // return single angle Normalized to 1\n        return Vector.normalizeRadians(angle);\n    }\n    /**\n     * Get normalized, spherical coordinates for the vector bc, relative to vector ab\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {Vector | number} c: Vector or Number\n     * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n     */\n    static getRelativeSphericalCoords(a, b, c, axisMap) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n            c = new Vector(c);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = b.subtract(a);\n        // Calculate vector between points 2 and 3\n        const v2 = c.subtract(b);\n        const v1norm = v1.unit();\n        const v2norm = v2.unit();\n        const { theta: theta1, phi: phi1 } = v1norm.toSphericalCoords(axisMap);\n        const { theta: theta2, phi: phi2 } = v2norm.toSphericalCoords(axisMap);\n        const theta = theta1 - theta2;\n        const phi = phi1 - phi2;\n        return {\n            theta: Vector.normalizeAngle(theta),\n            phi: Vector.normalizeAngle(phi),\n        };\n    }\n    /**\n     * Get normalized, spherical coordinates for the vector bc\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n     */\n    static getSphericalCoords(a, b, axisMap = { x: \"x\", y: \"y\", z: \"z\" }) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = b.subtract(a);\n        const v1norm = v1.unit();\n        const { theta, phi } = v1norm.toSphericalCoords(axisMap);\n        return {\n            theta: Vector.normalizeAngle(-theta),\n            phi: Vector.normalizeAngle(PI / 2 - phi),\n        };\n    }\n}\n", "import Vector from \"../utils/vector\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\n/**\n * Calculates arm rotation as euler angles\n * @param {Array} lm : array of 3D pose vectors from tfjs or mediapipe\n */\nexport const calcArms = (lm) => {\n    //Pure Rotation Calculations\n    const UpperArm = {\n        r: Vector.findRotation(lm[11], lm[13]),\n        l: Vector.findRotation(lm[12], lm[14]),\n    };\n    UpperArm.r.y = Vector.angleBetween3DCoords(lm[12], lm[11], lm[13]);\n    UpperArm.l.y = Vector.angleBetween3DCoords(lm[11], lm[12], lm[14]);\n    const LowerArm = {\n        r: Vector.findRotation(lm[13], lm[15]),\n        l: Vector.findRotation(lm[14], lm[16]),\n    };\n    LowerArm.r.y = Vector.angleBetween3DCoords(lm[11], lm[13], lm[15]);\n    LowerArm.l.y = Vector.angleBetween3DCoords(lm[12], lm[14], lm[16]);\n    LowerArm.r.z = clamp(LowerArm.r.z, -2.14, 0);\n    LowerArm.l.z = clamp(LowerArm.l.z, -2.14, 0);\n    const Hand = {\n        r: Vector.findRotation(Vector.fromArray(lm[15]), Vector.lerp(Vector.fromArray(lm[17]), Vector.fromArray(lm[19]), 0.5)),\n        l: Vector.findRotation(Vector.fromArray(lm[16]), Vector.lerp(Vector.fromArray(lm[18]), Vector.fromArray(lm[20]), 0.5)),\n    };\n    //Modify Rotations slightly for more natural movement\n    const rightArmRig = rigArm(UpperArm.r, LowerArm.r, Hand.r, RIGHT);\n    const leftArmRig = rigArm(UpperArm.l, LowerArm.l, Hand.l, LEFT);\n    return {\n        //Scaled\n        UpperArm: {\n            r: rightArmRig.UpperArm,\n            l: leftArmRig.UpperArm,\n        },\n        LowerArm: {\n            r: rightArmRig.LowerArm,\n            l: leftArmRig.LowerArm,\n        },\n        Hand: {\n            r: rightArmRig.Hand,\n            l: leftArmRig.Hand,\n        },\n        //Unscaled\n        Unscaled: {\n            UpperArm: UpperArm,\n            LowerArm: LowerArm,\n            Hand: Hand,\n        },\n    };\n};\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} UpperArm : normalized rotation values\n * @param {Object} LowerArm : normalized rotation values\n * @param {Object} Hand : normalized rotation values\n * @param {Side} side : left or right\n */\nexport const rigArm = (UpperArm, LowerArm, Hand, side = RIGHT) => {\n    // Invert modifier based on left vs right side\n    const invert = side === RIGHT ? 1 : -1;\n    UpperArm.z *= -2.3 * invert;\n    //Modify UpperArm rotationY  by LowerArm X and Z rotations\n    UpperArm.y *= PI * invert;\n    UpperArm.y -= Math.max(LowerArm.x);\n    UpperArm.y -= -invert * Math.max(LowerArm.z, 0);\n    UpperArm.x -= 0.3 * invert;\n    LowerArm.z *= -2.14 * invert;\n    LowerArm.y *= 2.14 * invert;\n    LowerArm.x *= 2.14 * invert;\n    //Clamp values to human limits\n    UpperArm.x = clamp(UpperArm.x, -0.5, PI);\n    LowerArm.x = clamp(LowerArm.x, -0.3, 0.3);\n    Hand.y = clamp(Hand.z * 2, -0.6, 0.6); //side to side\n    Hand.z = Hand.z * -2.3 * invert; //up down\n    return {\n        //Returns Values in Radians for direct 3D usage\n        UpperArm: UpperArm,\n        LowerArm: LowerArm,\n        Hand: Hand,\n    };\n};\n", "import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { PI } from \"./../constants\";\n/**\n * Calculates Hip rotation and world position\n * @param {Array} lm3d : array of 3D pose vectors from tfjs or mediapipe\n * @param {Array} lm2d : array of 2D pose vectors from tfjs or mediapipe\n */\nexport const calcHips = (lm3d, lm2d) => {\n    //Find 2D normalized Hip and Shoulder Joint Positions/Distances\n    const hipLeft2d = Vector.fromArray(lm2d[23]);\n    const hipRight2d = Vector.fromArray(lm2d[24]);\n    const shoulderLeft2d = Vector.fromArray(lm2d[11]);\n    const shoulderRight2d = Vector.fromArray(lm2d[12]);\n    const hipCenter2d = hipLeft2d.lerp(hipRight2d, 1);\n    const shoulderCenter2d = shoulderLeft2d.lerp(shoulderRight2d, 1);\n    const spineLength = hipCenter2d.distance(shoulderCenter2d);\n    const hips = {\n        position: {\n            x: clamp(hipCenter2d.x - 0.4, -1, 1),\n            y: 0,\n            z: clamp(spineLength - 1, -2, 0),\n        },\n    };\n    hips.worldPosition = {\n        x: hips.position.x,\n        y: 0,\n        z: hips.position.z * Math.pow(hips.position.z * -2, 2),\n    };\n    hips.worldPosition.x *= hips.worldPosition.z;\n    hips.rotation = Vector.rollPitchYaw(lm3d[23], lm3d[24]);\n    //fix -PI, PI jumping\n    if (hips.rotation.y > 0.5) {\n        hips.rotation.y -= 2;\n    }\n    hips.rotation.y += 0.5;\n    //Stop jumping between left and right shoulder tilt\n    if (hips.rotation.z > 0) {\n        hips.rotation.z = 1 - hips.rotation.z;\n    }\n    if (hips.rotation.z < 0) {\n        hips.rotation.z = -1 - hips.rotation.z;\n    }\n    const turnAroundAmountHips = remap(Math.abs(hips.rotation.y), 0.2, 0.4);\n    hips.rotation.z *= 1 - turnAroundAmountHips;\n    hips.rotation.x = 0; //temp fix for inaccurate X axis\n    const spine = Vector.rollPitchYaw(lm3d[11], lm3d[12]);\n    //fix -PI, PI jumping\n    if (spine.y > 0.5) {\n        spine.y -= 2;\n    }\n    spine.y += 0.5;\n    //Stop jumping between left and right shoulder tilt\n    if (spine.z > 0) {\n        spine.z = 1 - spine.z;\n    }\n    if (spine.z < 0) {\n        spine.z = -1 - spine.z;\n    }\n    //fix weird large numbers when 2 shoulder points get too close\n    const turnAroundAmount = remap(Math.abs(spine.y), 0.2, 0.4);\n    spine.z *= 1 - turnAroundAmount;\n    spine.x = 0; //temp fix for inaccurate X axis\n    return rigHips(hips, spine);\n};\n/**\n * Converts normalized rotations to radians and estimates world position of hips\n * @param {Object} hips : hip position and rotation values\n * @param {Object} spine : spine position and rotation values\n */\nexport const rigHips = (hips, spine) => {\n    //convert normalized values to radians\n    if (hips.rotation) {\n        hips.rotation.x *= Math.PI;\n        hips.rotation.y *= Math.PI;\n        hips.rotation.z *= Math.PI;\n    }\n    spine.x *= PI;\n    spine.y *= PI;\n    spine.z *= PI;\n    return {\n        Hips: hips,\n        Spine: spine,\n    };\n};\n", "/** Euler rotation class. */\nexport default class Euler {\n    constructor(a, b, c, rotationOrder) {\n        var _a, _b, _c, _d;\n        if (!!a && typeof a === \"object\") {\n            this.x = (_a = a.x) !== null && _a !== void 0 ? _a : 0;\n            this.y = (_b = a.y) !== null && _b !== void 0 ? _b : 0;\n            this.z = (_c = a.z) !== null && _c !== void 0 ? _c : 0;\n            this.rotationOrder = (_d = a.rotationOrder) !== null && _d !== void 0 ? _d : \"XYZ\";\n            return;\n        }\n        this.x = a !== null && a !== void 0 ? a : 0;\n        this.y = b !== null && b !== void 0 ? b : 0;\n        this.z = c !== null && c !== void 0 ? c : 0;\n        this.rotationOrder = rotationOrder !== null && rotationOrder !== void 0 ? rotationOrder : \"XYZ\";\n    }\n    /**\n     * Multiplies a number to an Euler.\n     * @param {number} a: Number to multiply\n     */\n    multiply(v) {\n        return new Euler(this.x * v, this.y * v, this.z * v, this.rotationOrder);\n    }\n}\n", "import Vector from \"../utils/vector\";\nimport Euler from \"../utils/euler\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\nexport const offsets = {\n    upperLeg: {\n        z: 0.1,\n    },\n};\n/**\n * Calculates leg rotation angles\n * @param {Results} lm : array of 3D pose vectors from tfjs or mediapipe\n */\nexport const calcLegs = (lm) => {\n    const rightUpperLegSphericalCoords = Vector.getSphericalCoords(lm[23], lm[25], { x: \"y\", y: \"z\", z: \"x\" });\n    const leftUpperLegSphericalCoords = Vector.getSphericalCoords(lm[24], lm[26], { x: \"y\", y: \"z\", z: \"x\" });\n    const rightLowerLegSphericalCoords = Vector.getRelativeSphericalCoords(lm[23], lm[25], lm[27], {\n        x: \"y\",\n        y: \"z\",\n        z: \"x\",\n    });\n    const leftLowerLegSphericalCoords = Vector.getRelativeSphericalCoords(lm[24], lm[26], lm[28], {\n        x: \"y\",\n        y: \"z\",\n        z: \"x\",\n    });\n    const hipRotation = Vector.findRotation(lm[23], lm[24]);\n    const UpperLeg = {\n        r: new Vector({\n            x: rightUpperLegSphericalCoords.theta,\n            y: rightLowerLegSphericalCoords.phi,\n            z: rightUpperLegSphericalCoords.phi - hipRotation.z,\n        }),\n        l: new Vector({\n            x: leftUpperLegSphericalCoords.theta,\n            y: leftLowerLegSphericalCoords.phi,\n            z: leftUpperLegSphericalCoords.phi - hipRotation.z,\n        }),\n    };\n    const LowerLeg = {\n        r: new Vector({\n            x: -Math.abs(rightLowerLegSphericalCoords.theta),\n            y: 0,\n            z: 0, // not relevant\n        }),\n        l: new Vector({\n            x: -Math.abs(leftLowerLegSphericalCoords.theta),\n            y: 0,\n            z: 0, // not relevant\n        }),\n    };\n    //Modify Rotations slightly for more natural movement\n    const rightLegRig = rigLeg(UpperLeg.r, LowerLeg.r, RIGHT);\n    const leftLegRig = rigLeg(UpperLeg.l, LowerLeg.l, LEFT);\n    return {\n        //Scaled\n        UpperLeg: {\n            r: rightLegRig.UpperLeg,\n            l: leftLegRig.UpperLeg,\n        },\n        LowerLeg: {\n            r: rightLegRig.LowerLeg,\n            l: leftLegRig.LowerLeg,\n        },\n        //Unscaled\n        Unscaled: {\n            UpperLeg,\n            LowerLeg,\n        },\n    };\n};\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} UpperLeg : normalized rotation values\n * @param {Object} LowerLeg : normalized rotation values\n * @param {Side} side : left or right\n */\nexport const rigLeg = (UpperLeg, LowerLeg, side = RIGHT) => {\n    const invert = side === RIGHT ? 1 : -1;\n    const rigedUpperLeg = new Euler({\n        x: clamp(UpperLeg.x, 0, 0.5) * PI,\n        y: clamp(UpperLeg.y, -0.25, 0.25) * PI,\n        z: clamp(UpperLeg.z, -0.5, 0.5) * PI + invert * offsets.upperLeg.z,\n        rotationOrder: \"XYZ\",\n    });\n    const rigedLowerLeg = new Euler({\n        x: LowerLeg.x * PI,\n        y: LowerLeg.y * PI,\n        z: LowerLeg.z * PI,\n    });\n    return {\n        UpperLeg: rigedUpperLeg,\n        LowerLeg: rigedLowerLeg,\n    };\n};\n", "import { RestingDefault } from \"../utils/helpers\";\nimport { calcArms } from \"./calcArms\";\nimport { calcHips } from \"./calcHips\";\nimport { calcLegs } from \"./calcLegs\";\n/** Class representing pose solver. */\nexport class PoseSolver {\n    /**\n     * Combines arm, hips, and leg calcs into one method\n     * @param {Array} lm3d : array of 3D pose vectors from tfjs or mediapipe\n     * @param {Array} lm2d : array of 2D pose vectors from tfjs or mediapipe\n     * @param {String} runtime: set as either \"tfjs\" or \"mediapipe\"\n     * @param {IPoseSolveOptions} options: options object\n     */\n    static solve(lm3d, lm2d, { runtime = \"mediapipe\", video = null, imageSize = null, enableLegs = true } = {}) {\n        var _a, _b, _c, _d;\n        if (!lm3d && !lm2d) {\n            console.error(\"Need both World Pose and Pose Landmarks\");\n            return;\n        }\n        // format and normalize values given by tfjs output\n        if (video) {\n            const videoEl = (typeof video === \"string\" ? document.querySelector(video) : video);\n            imageSize = {\n                width: videoEl.videoWidth,\n                height: videoEl.videoHeight,\n            };\n        }\n        if (runtime === \"tfjs\" && imageSize) {\n            for (const e of lm3d) {\n                e.visibility = e.score;\n            }\n            for (const e of lm2d) {\n                e.x /= imageSize.width;\n                e.y /= imageSize.height;\n                e.z = 0;\n                e.visibility = e.score;\n            }\n        }\n        const Arms = calcArms(lm3d);\n        const Hips = calcHips(lm3d, lm2d);\n        const Legs = enableLegs ? calcLegs(lm3d) : null;\n        //DETECT OFFSCREEN AND RESET VALUES TO DEFAULTS\n        const rightHandOffscreen = lm3d[15].y > 0.1 || ((_a = lm3d[15].visibility) !== null && _a !== void 0 ? _a : 0) < 0.23 || 0.995 < lm2d[15].y;\n        const leftHandOffscreen = lm3d[16].y > 0.1 || ((_b = lm3d[16].visibility) !== null && _b !== void 0 ? _b : 0) < 0.23 || 0.995 < lm2d[16].y;\n        const leftFootOffscreen = lm3d[23].y > 0.1 || ((_c = lm3d[23].visibility) !== null && _c !== void 0 ? _c : 0) < 0.63 || Hips.Hips.position.z > -0.4;\n        const rightFootOffscreen = lm3d[24].y > 0.1 || ((_d = lm3d[24].visibility) !== null && _d !== void 0 ? _d : 0) < 0.63 || Hips.Hips.position.z > -0.4;\n        Arms.UpperArm.l = Arms.UpperArm.l.multiply(leftHandOffscreen ? 0 : 1);\n        Arms.UpperArm.l.z = leftHandOffscreen ? RestingDefault.Pose.LeftUpperArm.z : Arms.UpperArm.l.z;\n        Arms.UpperArm.r = Arms.UpperArm.r.multiply(rightHandOffscreen ? 0 : 1);\n        Arms.UpperArm.r.z = rightHandOffscreen ? RestingDefault.Pose.RightUpperArm.z : Arms.UpperArm.r.z;\n        Arms.LowerArm.l = Arms.LowerArm.l.multiply(leftHandOffscreen ? 0 : 1);\n        Arms.LowerArm.r = Arms.LowerArm.r.multiply(rightHandOffscreen ? 0 : 1);\n        Arms.Hand.l = Arms.Hand.l.multiply(leftHandOffscreen ? 0 : 1);\n        Arms.Hand.r = Arms.Hand.r.multiply(rightHandOffscreen ? 0 : 1);\n        //skip calculations if disable legs\n        if (Legs) {\n            Legs.UpperLeg.l = Legs.UpperLeg.l.multiply(rightFootOffscreen ? 0 : 1);\n            Legs.UpperLeg.r = Legs.UpperLeg.r.multiply(leftFootOffscreen ? 0 : 1);\n            Legs.LowerLeg.l = Legs.LowerLeg.l.multiply(rightFootOffscreen ? 0 : 1);\n            Legs.LowerLeg.r = Legs.LowerLeg.r.multiply(leftFootOffscreen ? 0 : 1);\n        }\n        return {\n            RightUpperArm: Arms.UpperArm.r,\n            RightLowerArm: Arms.LowerArm.r,\n            LeftUpperArm: Arms.UpperArm.l,\n            LeftLowerArm: Arms.LowerArm.l,\n            RightHand: Arms.Hand.r,\n            LeftHand: Arms.Hand.l,\n            RightUpperLeg: Legs ? Legs.UpperLeg.r : RestingDefault.Pose.RightUpperLeg,\n            RightLowerLeg: Legs ? Legs.LowerLeg.r : RestingDefault.Pose.RightLowerLeg,\n            LeftUpperLeg: Legs ? Legs.UpperLeg.l : RestingDefault.Pose.LeftUpperLeg,\n            LeftLowerLeg: Legs ? Legs.LowerLeg.l : RestingDefault.Pose.LeftLowerLeg,\n            Hips: Hips.Hips,\n            Spine: Hips.Spine,\n        };\n    }\n}\n/** expose arm rotation calculator as a static method */\nPoseSolver.calcArms = calcArms;\n/** expose hips position and rotation calculator as a static method */\nPoseSolver.calcHips = calcHips;\n/** expose leg rotation calculator as a static method */\nPoseSolver.calcLegs = calcLegs;\n", "import Vector from \"../utils/vector\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\n/** Class representing hand solver. */\nexport class HandSolver {\n    /**\n     * Calculates finger and wrist as euler rotations\n     * @param {Array} lm : array of 3D hand vectors from tfjs or mediapipe\n     * @param {Side} side: left or right\n     */\n    static solve(lm, side = RIGHT) {\n        if (!lm) {\n            console.error(\"Need Hand Landmarks\");\n            return;\n        }\n        const palm = [\n            new Vector(lm[0]),\n            new Vector(lm[side === RIGHT ? 17 : 5]),\n            new Vector(lm[side === RIGHT ? 5 : 17]),\n        ];\n        const handRotation = Vector.rollPitchYaw(palm[0], palm[1], palm[2]);\n        handRotation.y = handRotation.z;\n        handRotation.y -= side === LEFT ? 0.4 : 0.4;\n        let hand = {};\n        hand[side + \"Wrist\"] = { x: handRotation.x, y: handRotation.y, z: handRotation.z };\n        hand[side + \"RingProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[13], lm[14]) };\n        hand[side + \"RingIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[13], lm[14], lm[15]) };\n        hand[side + \"RingDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[14], lm[15], lm[16]) };\n        hand[side + \"IndexProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[5], lm[6]) };\n        hand[side + \"IndexIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[5], lm[6], lm[7]) };\n        hand[side + \"IndexDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[6], lm[7], lm[8]) };\n        hand[side + \"MiddleProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[9], lm[10]) };\n        hand[side + \"MiddleIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[9], lm[10], lm[11]) };\n        hand[side + \"MiddleDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[10], lm[11], lm[12]) };\n        hand[side + \"ThumbProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[1], lm[2]) };\n        hand[side + \"ThumbIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[1], lm[2], lm[3]) };\n        hand[side + \"ThumbDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[2], lm[3], lm[4]) };\n        hand[side + \"LittleProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[17], lm[18]) };\n        hand[side + \"LittleIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[17], lm[18], lm[19]) };\n        hand[side + \"LittleDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[18], lm[19], lm[20]) };\n        hand = rigFingers(hand, side);\n        return hand;\n    }\n}\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} hand : object of labeled joint with normalized rotation values\n * @param {Side} side : left or right\n */\nconst rigFingers = (hand, side = RIGHT) => {\n    // Invert modifier based on left vs right side\n    const invert = side === RIGHT ? 1 : -1;\n    const digits = [\"Ring\", \"Index\", \"Little\", \"Thumb\", \"Middle\"];\n    const segments = [\"Proximal\", \"Intermediate\", \"Distal\"];\n    hand[side + \"Wrist\"].x = clamp(hand[side + \"Wrist\"].x * 2 * invert, -0.3, 0.3); // twist\n    hand[side + \"Wrist\"].y = clamp(hand[side + \"Wrist\"].y * 2.3, side === RIGHT ? -1.2 : -0.6, side === RIGHT ? 0.6 : 1.6);\n    hand[side + \"Wrist\"].z = hand[side + \"Wrist\"].z * -2.3 * invert; //left right\n    digits.forEach((e) => {\n        segments.forEach((j) => {\n            const trackedFinger = hand[side + e + j];\n            if (e === \"Thumb\") {\n                //dampen thumb rotation depending on segment\n                const dampener = {\n                    x: j === \"Proximal\" ? 2.2 : j === \"Intermediate\" ? 0 : 0,\n                    y: j === \"Proximal\" ? 2.2 : j === \"Intermediate\" ? 0.7 : 1,\n                    z: j === \"Proximal\" ? 0.5 : j === \"Intermediate\" ? 0.5 : 0.5,\n                };\n                const startPos = {\n                    x: j === \"Proximal\" ? 1.2 : j === \"Distal\" ? -0.2 : -0.2,\n                    y: j === \"Proximal\" ? 1.1 * invert : j === \"Distal\" ? 0.1 * invert : 0.1 * invert,\n                    z: j === \"Proximal\" ? 0.2 * invert : j === \"Distal\" ? 0.2 * invert : 0.2 * invert,\n                };\n                const newThumb = { x: 0, y: 0, z: 0 };\n                if (j === \"Proximal\") {\n                    newThumb.z = clamp(startPos.z + trackedFinger.z * -PI * dampener.z * invert, side === RIGHT ? -0.6 : -0.3, side === RIGHT ? 0.3 : 0.6);\n                    newThumb.x = clamp(startPos.x + trackedFinger.z * -PI * dampener.x, -0.6, 0.3);\n                    newThumb.y = clamp(startPos.y + trackedFinger.z * -PI * dampener.y * invert, side === RIGHT ? -1 : -0.3, side === RIGHT ? 0.3 : 1);\n                }\n                else {\n                    newThumb.z = clamp(startPos.z + trackedFinger.z * -PI * dampener.z * invert, -2, 2);\n                    newThumb.x = clamp(startPos.x + trackedFinger.z * -PI * dampener.x, -2, 2);\n                    newThumb.y = clamp(startPos.y + trackedFinger.z * -PI * dampener.y * invert, -2, 2);\n                }\n                trackedFinger.x = newThumb.x;\n                trackedFinger.y = newThumb.y;\n                trackedFinger.z = newThumb.z;\n            }\n            else {\n                //will document human limits later\n                trackedFinger.z = clamp(trackedFinger.z * -PI * invert, side === RIGHT ? -PI : 0, side === RIGHT ? 0 : PI);\n            }\n        });\n    });\n    return hand;\n};\n", "import Vector from \"../utils/vector\";\nimport { PI } from \"./../constants\";\n/**\n * Calculate stable plane (triangle) from 4 face landmarks\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const createEulerPlane = (lm) => {\n    //create face detection square bounds\n    const p1 = new Vector(lm[21]); //top left\n    const p2 = new Vector(lm[251]); //top right\n    const p3 = new Vector(lm[397]); //bottom right\n    const p4 = new Vector(lm[172]); //bottom left\n    const p3mid = p3.lerp(p4, 0.5); // bottom midpoint\n    return {\n        vector: [p1, p2, p3mid],\n        points: [p1, p2, p3, p4],\n    };\n};\n/**\n * Calculate roll, pitch, yaw, centerpoint, and rough dimentions of face plane\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcHead = (lm) => {\n    // find 3 vectors that form a plane to represent the head\n    const plane = createEulerPlane(lm).vector;\n    // calculate roll pitch and yaw from vectors\n    const rotate = Vector.rollPitchYaw(plane[0], plane[1], plane[2]);\n    // find the center of the face detection box\n    const midPoint = plane[0].lerp(plane[1], 0.5);\n    // find the dimensions roughly of the face detection box\n    const width = plane[0].distance(plane[1]);\n    const height = midPoint.distance(plane[2]);\n    //flip\n    rotate.x *= -1;\n    rotate.z *= -1;\n    return {\n        //defaults to radians for rotation around x,y,z axis\n        y: rotate.y * PI,\n        x: rotate.x * PI,\n        z: rotate.z * PI,\n        width: width,\n        height: height,\n        //center of face detection square\n        position: midPoint.lerp(plane[2], 0.5),\n        //returns euler angles normalized between -1 and 1\n        normalized: {\n            y: rotate.y,\n            x: rotate.x,\n            z: rotate.z,\n        },\n        degrees: {\n            y: rotate.y * 180,\n            x: rotate.x * 180,\n            z: rotate.z * 180,\n        },\n    };\n};\n", "import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\n/**\n * Landmark points labeled for eye, brow, and pupils\n */\nconst points = {\n    eye: {\n        [LEFT]: [130, 133, 160, 159, 158, 144, 145, 153],\n        [RIGHT]: [263, 362, 387, 386, 385, 373, 374, 380],\n    },\n    brow: {\n        [LEFT]: [35, 244, 63, 105, 66, 229, 230, 231],\n        [RIGHT]: [265, 464, 293, 334, 296, 449, 450, 451],\n    },\n    pupil: {\n        [LEFT]: [468, 469, 470, 471, 472],\n        [RIGHT]: [473, 474, 475, 476, 477],\n    },\n};\n/**\n * Calculate eye open ratios and remap to 0-1\n * @param {Array} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n * @param {Number} high : ratio at which eye is considered open\n * @param {Number} low : ratio at which eye is comsidered closed\n */\nexport const getEyeOpen = (lm, side = LEFT, { high = 0.85, low = 0.55 } = {}) => {\n    const eyePoints = points.eye[side];\n    const eyeDistance = eyeLidRatio(lm[eyePoints[0]], lm[eyePoints[1]], lm[eyePoints[2]], lm[eyePoints[3]], lm[eyePoints[4]], lm[eyePoints[5]], lm[eyePoints[6]], lm[eyePoints[7]]);\n    // human eye width to height ratio is roughly .3\n    const maxRatio = 0.285;\n    // compare ratio against max ratio\n    const ratio = clamp(eyeDistance / maxRatio, 0, 2);\n    // remap eye open and close ratios to increase sensitivity\n    const eyeOpenRatio = remap(ratio, low, high);\n    return {\n        // remapped ratio\n        norm: eyeOpenRatio,\n        // ummapped ratio\n        raw: ratio,\n    };\n};\n/**\n * Calculate eyelid distance ratios based on landmarks on the face\n */\nexport const eyeLidRatio = (eyeOuterCorner, eyeInnerCorner, eyeOuterUpperLid, eyeMidUpperLid, eyeInnerUpperLid, eyeOuterLowerLid, eyeMidLowerLid, eyeInnerLowerLid) => {\n    eyeOuterCorner = new Vector(eyeOuterCorner);\n    eyeInnerCorner = new Vector(eyeInnerCorner);\n    eyeOuterUpperLid = new Vector(eyeOuterUpperLid);\n    eyeMidUpperLid = new Vector(eyeMidUpperLid);\n    eyeInnerUpperLid = new Vector(eyeInnerUpperLid);\n    eyeOuterLowerLid = new Vector(eyeOuterLowerLid);\n    eyeMidLowerLid = new Vector(eyeMidLowerLid);\n    eyeInnerLowerLid = new Vector(eyeInnerLowerLid);\n    //use 2D Distances instead of 3D for less jitter\n    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n    const eyeOuterLidDistance = eyeOuterUpperLid.distance(eyeOuterLowerLid, 2);\n    const eyeMidLidDistance = eyeMidUpperLid.distance(eyeMidLowerLid, 2);\n    const eyeInnerLidDistance = eyeInnerUpperLid.distance(eyeInnerLowerLid, 2);\n    const eyeLidAvg = (eyeOuterLidDistance + eyeMidLidDistance + eyeInnerLidDistance) / 3;\n    const ratio = eyeLidAvg / eyeWidth;\n    return ratio;\n};\n/**\n * Calculate pupil position [-1,1]\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : left or right\n */\nexport const pupilPos = (lm, side = LEFT) => {\n    const eyeOuterCorner = new Vector(lm[points.eye[side][0]]);\n    const eyeInnerCorner = new Vector(lm[points.eye[side][1]]);\n    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n    const midPoint = eyeOuterCorner.lerp(eyeInnerCorner, 0.5);\n    const pupil = new Vector(lm[points.pupil[side][0]]);\n    const dx = midPoint.x - pupil.x;\n    //eye center y is slightly above midpoint\n    const dy = midPoint.y - eyeWidth * 0.075 - pupil.y;\n    let ratioX = dx / (eyeWidth / 2);\n    let ratioY = dy / (eyeWidth / 4);\n    ratioX *= 4;\n    ratioY *= 4;\n    return { x: ratioX, y: ratioY };\n};\n/**\n * Method to stabilize blink speeds to fix inconsistent eye open/close timing\n * @param {Object} eye : object with left and right eye values\n * @param {Number} headY : head y axis rotation in radians\n * @param {Object} options: Options for blink stabilization\n */\nexport const stabilizeBlink = (eye, headY, { enableWink = true, maxRot = 0.5, } = {}) => {\n    eye.r = clamp(eye.r, 0, 1);\n    eye.l = clamp(eye.l, 0, 1);\n    //difference between each eye\n    const blinkDiff = Math.abs(eye.l - eye.r);\n    //theshold to which difference is considered a wink\n    const blinkThresh = enableWink ? 0.8 : 1.2;\n    //detect when both eyes are closing\n    const isClosing = eye.l < 0.3 && eye.r < 0.3;\n    //detect when both eyes are opening\n    const isOpen = eye.l > 0.6 && eye.r > 0.6;\n    // sets obstructed eye to the opposite eye value\n    if (headY > maxRot) {\n        return { l: eye.r, r: eye.r };\n    }\n    if (headY < -maxRot) {\n        return { l: eye.l, r: eye.l };\n    }\n    // returns either a wink or averaged blink values\n    return {\n        l: blinkDiff >= blinkThresh && !isClosing && !isOpen\n            ? eye.l\n            : eye.r > eye.l\n                ? Vector.lerp(eye.r, eye.l, 0.95)\n                : Vector.lerp(eye.r, eye.l, 0.05),\n        r: blinkDiff >= blinkThresh && !isClosing && !isOpen\n            ? eye.r\n            : eye.r > eye.l\n                ? Vector.lerp(eye.r, eye.l, 0.95)\n                : Vector.lerp(eye.r, eye.l, 0.05),\n    };\n};\n/**\n * Calculate Eyes\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcEyes = (lm, { high = 0.85, low = 0.55, } = {}) => {\n    //return early if no iris tracking\n    if (lm.length !== 478) {\n        return {\n            l: 1,\n            r: 1,\n        };\n    }\n    //open [0,1]\n    const leftEyeLid = getEyeOpen(lm, LEFT, { high: high, low: low });\n    const rightEyeLid = getEyeOpen(lm, RIGHT, { high: high, low: low });\n    return {\n        l: leftEyeLid.norm || 0,\n        r: rightEyeLid.norm || 0,\n    };\n};\n/**\n * Calculate pupil location normalized to eye bounds\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcPupils = (lm) => {\n    //pupil x:[-1,1],y:[-1,1]\n    if (lm.length !== 478) {\n        return { x: 0, y: 0 };\n    }\n    else {\n        //track pupils using left eye\n        const pupilL = pupilPos(lm, LEFT);\n        const pupilR = pupilPos(lm, RIGHT);\n        return {\n            x: (pupilL.x + pupilR.x) * 0.5 || 0,\n            y: (pupilL.y + pupilR.y) * 0.5 || 0,\n        };\n    }\n};\n/**\n * Calculate brow raise\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n */\nexport const getBrowRaise = (lm, side = LEFT) => {\n    const browPoints = points.brow[side];\n    const browDistance = eyeLidRatio(lm[browPoints[0]], lm[browPoints[1]], lm[browPoints[2]], lm[browPoints[3]], lm[browPoints[4]], lm[browPoints[5]], lm[browPoints[6]], lm[browPoints[7]]);\n    const maxBrowRatio = 1.15;\n    const browHigh = 0.125;\n    const browLow = 0.07;\n    const browRatio = browDistance / maxBrowRatio - 1;\n    const browRaiseRatio = (clamp(browRatio, browLow, browHigh) - browLow) / (browHigh - browLow);\n    return browRaiseRatio;\n};\n/**\n * Take the average of left and right eyebrow raise values\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcBrow = (lm) => {\n    if (lm.length !== 478) {\n        return 0;\n    }\n    else {\n        const leftBrow = getBrowRaise(lm, LEFT);\n        const rightBrow = getBrowRaise(lm, RIGHT);\n        return (leftBrow + rightBrow) / 2 || 0;\n    }\n};\n", "import Vector from \"../utils/vector\";\nimport { remap, clamp } from \"../utils/helpers\";\n/**\n * Calculate Mouth Shape\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcMouth = (lm) => {\n    // eye keypoints\n    const eyeInnerCornerL = new Vector(lm[133]);\n    const eyeInnerCornerR = new Vector(lm[362]);\n    const eyeOuterCornerL = new Vector(lm[130]);\n    const eyeOuterCornerR = new Vector(lm[263]);\n    // eye keypoint distances\n    const eyeInnerDistance = eyeInnerCornerL.distance(eyeInnerCornerR);\n    const eyeOuterDistance = eyeOuterCornerL.distance(eyeOuterCornerR);\n    // mouth keypoints\n    const upperInnerLip = new Vector(lm[13]);\n    const lowerInnerLip = new Vector(lm[14]);\n    const mouthCornerLeft = new Vector(lm[61]);\n    const mouthCornerRight = new Vector(lm[291]);\n    // mouth keypoint distances\n    const mouthOpen = upperInnerLip.distance(lowerInnerLip);\n    const mouthWidth = mouthCornerLeft.distance(mouthCornerRight);\n    // mouth open and mouth shape ratios\n    // let ratioXY = mouthWidth / mouthOpen;\n    let ratioY = mouthOpen / eyeInnerDistance;\n    let ratioX = mouthWidth / eyeOuterDistance;\n    // normalize and scale mouth open\n    ratioY = remap(ratioY, 0.15, 0.7);\n    // normalize and scale mouth shape\n    ratioX = remap(ratioX, 0.45, 0.9);\n    ratioX = (ratioX - 0.3) * 2;\n    // const mouthX = remap(ratioX - 0.4, 0, 0.5);\n    const mouthX = ratioX;\n    const mouthY = remap(mouthOpen / eyeInnerDistance, 0.17, 0.5);\n    //Depricated: Change sensitivity due to facemesh and holistic have different point outputs.\n    // const fixFacemesh = runtime === \"tfjs\" ? 1.3 : 0;\n    // let ratioI = remap(mouthXY, 1.3 + fixFacemesh * 0.8, 2.6 + fixFacemesh) * remap(mouthY, 0, 1);\n    const ratioI = clamp(remap(mouthX, 0, 1) * 2 * remap(mouthY, 0.2, 0.7), 0, 1);\n    const ratioA = mouthY * 0.4 + mouthY * (1 - ratioI) * 0.6;\n    const ratioU = mouthY * remap(1 - ratioI, 0, 0.3) * 0.1;\n    const ratioE = remap(ratioU, 0.2, 1) * (1 - ratioI) * 0.3;\n    const ratioO = (1 - ratioI) * remap(mouthY, 0.3, 1) * 0.4;\n    return {\n        x: ratioX || 0,\n        y: ratioY || 0,\n        shape: {\n            A: ratioA || 0,\n            E: ratioE || 0,\n            I: ratioI || 0,\n            O: ratioO || 0,\n            U: ratioU || 0,\n        },\n    };\n};\n", "import { calcHead } from \"./calcHead\";\nimport { calcEyes, stabilizeBlink, calcPupils, calcBrow } from \"./calcEyes\";\nimport { calcMouth } from \"./calcMouth\";\n/** Class representing face solver. */\nexport class FaceSolver {\n    /**\n     * Combines head, eye, pupil, and eyebrow calcs into one method\n     * @param {Results} lm : array of results from tfjs or mediapipe\n     * @param {String} runtime: set as either \"tfjs\" or \"mediapipe\"\n     * @param {IFaceSolveOptions} options: options for face solver\n     */\n    static solve(lm, { runtime = \"tfjs\", video = null, imageSize = null, smoothBlink = false, blinkSettings = [], } = {}) {\n        if (!lm) {\n            console.error(\"Need Face Landmarks\");\n            return;\n        }\n        // set image size based on video\n        if (video) {\n            const videoEl = (typeof video === \"string\" ? document.querySelector(video) : video);\n            imageSize = {\n                width: videoEl.videoWidth,\n                height: videoEl.videoHeight,\n            };\n        }\n        //if runtime is mediapipe, we need the image dimentions for accurate calculations\n        if (runtime === \"mediapipe\" && imageSize) {\n            for (const e of lm) {\n                e.x *= imageSize.width;\n                e.y *= imageSize.height;\n                e.z *= imageSize.width;\n            }\n        }\n        const getHead = calcHead(lm);\n        const getMouth = calcMouth(lm);\n        //set high and low remapping values based on the runtime (tfjs vs mediapipe) of the results\n        blinkSettings = blinkSettings.length > 0 ? blinkSettings : runtime === \"tfjs\" ? [0.55, 0.85] : [0.35, 0.5];\n        let getEye = calcEyes(lm, {\n            high: blinkSettings[1],\n            low: blinkSettings[0],\n        });\n        // apply blink stabilizer if true\n        if (smoothBlink) {\n            getEye = stabilizeBlink(getEye, getHead.y);\n        }\n        const getPupils = calcPupils(lm);\n        const getBrow = calcBrow(lm);\n        return {\n            head: getHead,\n            eye: getEye,\n            brow: getBrow,\n            pupil: getPupils,\n            mouth: getMouth,\n        };\n    }\n}\n/** expose blink stabilizer as a static method */\nFaceSolver.stabilizeBlink = stabilizeBlink;\n"],
  "mappings": "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",
  "names": []
}
